{"version":3,"sources":["ng://@alfresco/aca-shared/rules/navigation.rules.ts","ng://@alfresco/aca-shared/rules/repository.rules.ts","ng://@alfresco/aca-shared/rules/app.rules.ts","ng://@alfresco/aca-shared/rules/user.rules.ts"],"names":["isPreview","context","url","navigation","includes","isFavorites","startsWith","isSharedFiles","isTrashcan","isNotTrashcan","isLibraries","endsWith","isNotLibraries","isRecentFiles","isSearchResults","isNotSearchResults","hasQuickShareEnabled","repository","status","isQuickShareEnabled","canAddFavorite","selection","isEmpty","navigation.isFavorites","navigation.isLibraries","navigation.isTrashcan","nodes","some","node","entry","isFavorite","canRemoveFavorite","every","canShareFile","file","navigation.isNotTrashcan","repository.hasQuickShareEnabled","isShared","Boolean","navigation.isSharedFiles","properties","hasSelection","hasLibrarySelected","library","isPrivateLibrary","visibility","hasLibraryRole","role","hasNoLibraryRole","hasFileSelected","canUpdateSelectedNode","first","isFile","hasLockedFiles","permissions","check","canUpdateSelectedFolder","folder","isLocked","isWriteLocked","isUserWriteLockOwner","id","profile","canLockFile","canUnlockFile","canCopyNode","navigation.isNotLibraries","canToggleJoinLibrary","canEditFolder","canDeleteSelection","navigation.isNotSearchResults","navigation.isPreview","target","canUnshareNodes","canCreateFolder","currentFolder","canUpload","canDownloadSelection","isFolder","nodeId","hasFolderSelected","canUploadVersion","isTrashcanItemSelected","canViewFile","canLeaveLibrary","canToggleSharedLink","canShowInfoDrawer","canManageFileVersions","canManagePermissions","canToggleEditOffline","canToggleFavorite","navigation.isRecentFiles","navigation.isSearchResults","canShowLanguagePicker","languagePicker","canShowLogout","withCredentials","canShowProcessServices","processServices","isNotFavorites","isNotSharedFiles","isPersonalFiles","isLibraryFiles","isNotRecentFiles","isSharedPreview","isFavoritesPreview","isSharedFileViewer","isAdmin"],"mappings":"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","sourcesContent":["/*!\n * @license\n * Alfresco Example Content Application\n *\n * Copyright (C) 2005 - 2020 Alfresco Software Limited\n *\n * This file is part of the Alfresco Example Content Application.\n * If the software was purchased under a paid Alfresco license, the terms of\n * the paid license agreement will prevail.  Otherwise, the software is\n * provided under the following open source license terms:\n *\n * The Alfresco Example Content Application is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The Alfresco Example Content Application is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with Alfresco. If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { RuleContext } from '@alfresco/adf-extensions';\n\n/**\n * Checks if a Preview route is activated.\n * JSON ref: `app.navigation.isPreview`\n */\nexport function isPreview(context: RuleContext): boolean {\n  const { url } = context.navigation;\n  return (\n    url &&\n    (url.includes('/preview/') ||\n      url.includes('viewer:view') ||\n      url.includes('/view/'))\n  );\n}\n\n/**\n * Checks if a **Favorites** route is activated.\n * JSON ref: `app.navigation.isFavorites`\n */\nexport function isFavorites(context: RuleContext): boolean {\n  const { url } = context.navigation;\n  return url && url.startsWith('/favorites') && !isPreview(context);\n}\n\n/**\n * Checks if the activated route is not **Favorites**.\n * JSON ref: `app.navigation.isNotFavorites`\n */\nexport function isNotFavorites(context: RuleContext): boolean {\n  return !isFavorites(context);\n}\n\n/**\n * Checks if a **Shared Files** route is activated.\n * JSON ref: `app.navigation.isSharedFiles`\n */\nexport function isSharedFiles(context: RuleContext): boolean {\n  const { url } = context.navigation;\n  return url && url.startsWith('/shared') && !isPreview(context);\n}\n\n/**\n * Checks if the activated route is not **Shared Files**.\n * JSON ref: `app.navigation.isNotSharedFiles`\n */\nexport function isNotSharedFiles(context: RuleContext): boolean {\n  return !isSharedFiles(context);\n}\n\n/**\n * Checks if a **Trashcan** route is activated.\n * JSON ref: `app.navigation.isTrashcan`\n */\nexport function isTrashcan(context: RuleContext): boolean {\n  const { url } = context.navigation;\n  return url && url.startsWith('/trashcan');\n}\n\n/**\n * Checks if the activated route is not **Trashcan**.\n * JSON ref: `app.navigation.isNotTrashcan`\n */\nexport function isNotTrashcan(context: RuleContext): boolean {\n  return !isTrashcan(context);\n}\n\n/**\n * Checks if a **Personal Files** route is activated.\n * JSON ref: `app.navigation.isPersonalFiles`\n */\nexport function isPersonalFiles(context: RuleContext): boolean {\n  const { url } = context.navigation;\n  return url && url.startsWith('/personal-files');\n}\n\n/**\n * Checks if a **Library Files** route is activated.\n * JSON ref: `app.navigation.isLibraryFiles`\n */\nexport function isLibraryFiles(context: RuleContext): boolean {\n  const { url } = context.navigation;\n  return url && url.startsWith('/libraries');\n}\n\n/**\n * Checks if a **Library Files** or **Library Search Result** route is activated.\n * JSON ref: `app.navigation.isLibraryFiles`\n */\nexport function isLibraries(context: RuleContext): boolean {\n  const { url } = context.navigation;\n  return (\n    url && (url.endsWith('/libraries') || url.startsWith('/search-libraries'))\n  );\n}\n\n/**\n * Checks if the activated route is neither **Libraries** nor **Library Search Results**.\n * JSON ref: `app.navigation.isNotLibraries`\n */\nexport function isNotLibraries(context: RuleContext): boolean {\n  return !isLibraries(context);\n}\n\n/**\n * Checks if a **Recent Files** route is activated.\n * JSON ref: `app.navigation.isRecentFiles`\n */\nexport function isRecentFiles(context: RuleContext): boolean {\n  const { url } = context.navigation;\n  return url && url.startsWith('/recent-files');\n}\n\n/**\n * Checks if the activated route is not **Recent Files**.\n * JSON ref: `app.navigation.isNotRecentFiles`\n */\nexport function isNotRecentFiles(context: RuleContext): boolean {\n  return !isRecentFiles(context);\n}\n\n/**\n * Checks if a **Search Results** route is activated.\n * JSON ref: `app.navigation.isSearchResults`\n */\nexport function isSearchResults(\n  context: RuleContext /*,\n  ...args: RuleParameter[]*/\n): boolean {\n  const { url } = context.navigation;\n  return url && url.startsWith('/search');\n}\n\n/**\n * Checks if the activated route is not **Search Results**.\n * JSON ref: `app.navigation.isNotSearchResults`\n */\nexport function isNotSearchResults(context: RuleContext): boolean {\n  return !isSearchResults(context);\n}\n\n/**\n * Checks if a **Shared Preview** route is activated.\n * JSON ref: `app.navigation.isSharedPreview`\n */\nexport function isSharedPreview(context: RuleContext): boolean {\n  const { url } = context.navigation;\n  return (\n    url &&\n    (url.startsWith('/shared/preview/') ||\n      (url.startsWith('/shared') && url.includes('viewer:view')))\n  );\n}\n\n/**\n * Checks if a **Favorites Preview** route is activated.\n * JSON ref: `app.navigation.isFavoritesPreview`\n */\nexport function isFavoritesPreview(context: RuleContext): boolean {\n  const { url } = context.navigation;\n  return (\n    url &&\n    (url.startsWith('/favorites/preview/') ||\n      (url.startsWith('/favorites') && url.includes('viewer:view')))\n  );\n}\n\n/**\n * Checks if a **Shared File Preview** route is activated.\n * JSON ref: `app.navigation.isFavoritesPreview`\n */\nexport function isSharedFileViewer(context: RuleContext): boolean {\n  const { url } = context.navigation;\n  return url && url.startsWith('/preview/s/');\n}\n","/*!\n * @license\n * Alfresco Example Content Application\n *\n * Copyright (C) 2005 - 2020 Alfresco Software Limited\n *\n * This file is part of the Alfresco Example Content Application.\n * If the software was purchased under a paid Alfresco license, the terms of\n * the paid license agreement will prevail.  Otherwise, the software is\n * provided under the following open source license terms:\n *\n * The Alfresco Example Content Application is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The Alfresco Example Content Application is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with Alfresco. If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { RuleContext } from '@alfresco/adf-extensions';\n\n/**\n * Checks if the quick share repository option is enabled or not.\n * JSON ref: `repository.isQuickShareEnabled`\n */\nexport function hasQuickShareEnabled(context: RuleContext): boolean {\n  return context.repository.status.isQuickShareEnabled;\n}\n","/*!\n * @license\n * Alfresco Example Content Application\n *\n * Copyright (C) 2005 - 2020 Alfresco Software Limited\n *\n * This file is part of the Alfresco Example Content Application.\n * If the software was purchased under a paid Alfresco license, the terms of\n * the paid license agreement will prevail.  Otherwise, the software is\n * provided under the following open source license terms:\n *\n * The Alfresco Example Content Application is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The Alfresco Example Content Application is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with Alfresco. If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { RuleContext } from '@alfresco/adf-extensions';\nimport * as navigation from './navigation.rules';\nimport * as repository from './repository.rules';\n\nexport interface AcaRuleContext extends RuleContext {\n  languagePicker: boolean;\n  withCredentials: boolean;\n  processServices: boolean;\n}\n\n/**\n * Checks if user can copy selected node.\n * JSON ref: `app.canCopyNode`\n * @param context Rule execution context\n */\nexport function canCopyNode(context: RuleContext): boolean {\n  return [\n    hasSelection(context),\n    navigation.isNotTrashcan(context),\n    navigation.isNotLibraries(context)\n  ].every(Boolean);\n}\n\n/**\n * Checks if user can mark selected nodes as **Favorite**.\n * JSON ref: `app.selection.canAddFavorite`\n */\nexport function canAddFavorite(context: RuleContext): boolean {\n  if (!context.selection.isEmpty) {\n    if (\n      navigation.isFavorites(context) ||\n      navigation.isLibraries(context) ||\n      navigation.isTrashcan(context)\n    ) {\n      return false;\n    }\n    return context.selection.nodes.some(node => !node.entry.isFavorite);\n  }\n  return false;\n}\n\n/**\n * Checks if user can un-mark selected nodes as **Favorite**.\n * JSON ref: `app.selection.canRemoveFavorite`\n */\nexport function canRemoveFavorite(context: RuleContext): boolean {\n  if (!context.selection.isEmpty && !navigation.isTrashcan(context)) {\n    if (navigation.isFavorites(context)) {\n      return true;\n    }\n    return context.selection.nodes.every(node => node.entry.isFavorite);\n  }\n  return false;\n}\n\n/**\n * Checks if user can share selected file.\n * JSON ref: `app.selection.file.canShare`\n */\nexport function canShareFile(context: RuleContext): boolean {\n  return [\n    context.selection.file,\n    navigation.isNotTrashcan(context),\n    repository.hasQuickShareEnabled(context),\n    !isShared(context)\n  ].every(Boolean);\n}\n\n/**\n * Checks if user can perform \"Join\" or \"Cancel Join Request\" on a library.\n * JSON ref: `canToggleJoinLibrary`\n */\nexport function canToggleJoinLibrary(context: RuleContext): boolean {\n  return [\n    hasLibrarySelected(context),\n    !isPrivateLibrary(context),\n    hasNoLibraryRole(context)\n  ].every(Boolean);\n}\n\n/**\n * Checks if user can edit the selected folder.\n * JSON ref: `canEditFolder`\n * @param context Rule execution context\n */\nexport function canEditFolder(context: RuleContext): boolean {\n  return [\n    canUpdateSelectedFolder(context),\n    navigation.isNotTrashcan(context)\n  ].every(Boolean);\n}\n\n/**\n * Checks if the selected file is already shared.\n * JSON ref: `app.selection.file.isShared`\n */\nexport function isShared(context: RuleContext): boolean {\n  if (navigation.isSharedFiles(context) && context.selection.file) {\n    return true;\n  }\n\n  if (\n    (navigation.isNotTrashcan(context),\n    !context.selection.isEmpty && context.selection.file)\n  ) {\n    return !!(\n      context.selection.file.entry &&\n      context.selection.file.entry.properties &&\n      context.selection.file.entry.properties['qshare:sharedId']\n    );\n  }\n\n  return false;\n}\n\n/**\n * Checks if user can delete selected nodes.\n * JSON ref: `app.selection.canDelete`\n */\nexport function canDeleteSelection(context: RuleContext): boolean {\n  if (\n    navigation.isNotTrashcan(context) &&\n    navigation.isNotLibraries(context) &&\n    navigation.isNotSearchResults(context) &&\n    !context.selection.isEmpty\n  ) {\n    if (hasLockedFiles(context)) {\n      return false;\n    }\n\n    // temp workaround for Favorites api\n    if (navigation.isFavorites(context)) {\n      return true;\n    }\n\n    if (navigation.isPreview(context)) {\n      return context.permissions.check(context.selection.nodes, ['delete']);\n    }\n\n    // workaround for Shared Files\n    if (navigation.isSharedFiles(context)) {\n      return context.permissions.check(context.selection.nodes, ['delete'], {\n        target: 'allowableOperationsOnTarget'\n      });\n    }\n\n    return context.permissions.check(context.selection.nodes, ['delete']);\n  }\n  return false;\n}\n\n/**\n * Checks if user can un-share selected nodes.\n * JSON ref: `app.selection.canUnshare`\n */\nexport function canUnshareNodes(context: RuleContext): boolean {\n  if (!context.selection.isEmpty) {\n    return context.permissions.check(context.selection.nodes, ['delete'], {\n      target: 'allowableOperationsOnTarget'\n    });\n  }\n  return false;\n}\n\n/**\n * Checks if user selected anything.\n * JSON ref: `app.selection.notEmpty`\n */\nexport function hasSelection(context: RuleContext): boolean {\n  return !context.selection.isEmpty;\n}\n\n/**\n * Checks if user can create a new folder with current path.\n * JSON ref: `app.navigation.folder.canCreate`\n */\nexport function canCreateFolder(context: RuleContext): boolean {\n  const { currentFolder } = context.navigation;\n  if (currentFolder) {\n    return context.permissions.check(currentFolder, ['create']);\n  }\n  return false;\n}\n\n/**\n * Checks if user can upload content to current folder.\n * JSON ref: `app.navigation.folder.canUpload`\n */\nexport function canUpload(context: RuleContext): boolean {\n  const { currentFolder } = context.navigation;\n  if (currentFolder) {\n    return context.permissions.check(currentFolder, ['create']);\n  }\n  return false;\n}\n\n/**\n * Checks if user can download selected nodes (either files or folders).\n * JSON ref: `app.selection.canDownload`\n */\nexport function canDownloadSelection(context: RuleContext): boolean {\n  if (!context.selection.isEmpty && navigation.isNotTrashcan(context)) {\n    return context.selection.nodes.every((node: any) => {\n      return (\n        node.entry &&\n        (node.entry.isFile || node.entry.isFolder || !!node.entry.nodeId)\n      );\n    });\n  }\n  return false;\n}\n\n/**\n * Checks if user has selected a folder.\n * JSON ref: `app.selection.folder`\n */\nexport function hasFolderSelected(context: RuleContext): boolean {\n  const folder = context.selection.folder;\n  return folder ? true : false;\n}\n\n/**\n * Checks if user has selected a library (site).\n * JSON ref: `app.selection.library`\n */\nexport function hasLibrarySelected(context: RuleContext): boolean {\n  const library = context.selection.library;\n  return library ? true : false;\n}\n\n/**\n * Checks if user has selected a **private** library (site)\n * JSON ref: `app.selection.isPrivateLibrary`\n */\nexport function isPrivateLibrary(context: RuleContext): boolean {\n  const library = context.selection.library;\n  return library\n    ? !!(\n        library.entry &&\n        library.entry.visibility &&\n        library.entry.visibility === 'PRIVATE'\n      )\n    : false;\n}\n\n/**\n * Checks if the selected library has a **role** property defined.\n * JSON ref: `app.selection.hasLibraryRole`\n */\nexport function hasLibraryRole(context: RuleContext): boolean {\n  const library = context.selection.library;\n  return library ? !!(library.entry && library.entry.role) : false;\n}\n\n/**\n * Checks if the selected library has no **role** property defined.\n * JSON ref: `app.selection.hasNoLibraryRole`\n */\nexport function hasNoLibraryRole(context: RuleContext): boolean {\n  return !hasLibraryRole(context);\n}\n\n/**\n * Checks if user has selected a file.\n * JSON ref: `app.selection.file`\n */\nexport function hasFileSelected(context: RuleContext): boolean {\n  if (context && context.selection && context.selection.file) {\n    return true;\n  }\n  return false;\n}\n\n/**\n * Checks if user can update the first selected node.\n * JSON ref: `app.selection.first.canUpdate`\n */\nexport function canUpdateSelectedNode(context: RuleContext): boolean {\n  if (context.selection && !context.selection.isEmpty) {\n    const node = context.selection.first;\n\n    if (node.entry.isFile && hasLockedFiles(context)) {\n      return false;\n    }\n\n    return context.permissions.check(node, ['update']);\n  }\n  return false;\n}\n\n/**\n * Checks if user can update the first selected folder.\n * JSON ref: `app.selection.folder.canUpdate`\n */\nexport function canUpdateSelectedFolder(context: RuleContext): boolean {\n  const { folder } = context.selection;\n  if (folder) {\n    return (\n      // workaround for Favorites Api\n      navigation.isFavorites(context) ||\n      context.permissions.check(folder.entry, ['update'])\n    );\n  }\n  return false;\n}\n\n/**\n * Checks if user has selected a **locked** file node.\n * JSON ref: `app.selection.file.isLocked`\n */\nexport function hasLockedFiles(context: RuleContext): boolean {\n  if (context && context.selection && context.selection.nodes) {\n    return context.selection.nodes.some(node => {\n      if (!node.entry.isFile) {\n        return false;\n      }\n\n      return (\n        node.entry.isLocked ||\n        (node.entry.properties &&\n          node.entry.properties['cm:lockType'] === 'READ_ONLY_LOCK')\n      );\n    });\n  }\n\n  return false;\n}\n\n/**\n * Checks if the selected file has **write** or **read-only** locks specified.\n * JSON ref: `app.selection.file.isLocked`\n */\nexport function isWriteLocked(context: RuleContext): boolean {\n  return !!(\n    context &&\n    context.selection &&\n    context.selection.file &&\n    context.selection.file.entry &&\n    context.selection.file.entry.properties &&\n    (context.selection.file.entry.properties['cm:lockType'] === 'WRITE_LOCK' ||\n      context.selection.file.entry.properties['cm:lockType'] ===\n        'READ_ONLY_LOCK')\n  );\n}\n\n/**\n * Checks if the selected file has **write** or **read-only** locks specified,\n * and that current user is the owner of the lock.\n * JSON ref: `app.selection.file.isLockOwner`\n */\nexport function isUserWriteLockOwner(context: RuleContext): boolean {\n  return (\n    isWriteLocked(context) &&\n    (context.selection.file.entry.properties['cm:lockOwner'] &&\n      context.selection.file.entry.properties['cm:lockOwner'].id ===\n        context.profile.id)\n  );\n}\n\n/**\n * Checks if user can lock selected file.\n * JSON ref: `app.selection.file.canLock`\n */\nexport function canLockFile(context: RuleContext): boolean {\n  return !isWriteLocked(context) && canUpdateSelectedNode(context);\n}\n\n/**\n * Checks if user can unlock selected file.\n * JSON ref: `app.selection.file.canUnlock`\n */\nexport function canUnlockFile(context: RuleContext): boolean {\n  const { file } = context.selection;\n  return (\n    isWriteLocked(context) &&\n    (context.permissions.check(file.entry, ['delete']) ||\n      isUserWriteLockOwner(context))\n  );\n}\n\n/**\n * Checks if user can upload a new version of the file.\n * JSON ref: `app.selection.file.canUploadVersion`\n */\nexport function canUploadVersion(context: RuleContext): boolean {\n  if (navigation.isFavorites(context) || navigation.isSharedFiles(context)) {\n    return hasFileSelected(context);\n  }\n\n  return [\n    hasFileSelected(context),\n    navigation.isNotTrashcan(context),\n    isWriteLocked(context)\n      ? isUserWriteLockOwner(context)\n      : canUpdateSelectedNode(context)\n  ].every(Boolean);\n}\n\n/**\n * Checks if user has trashcan item selected.\n * JSON ref: `isTrashcanItemSelected`\n * @param context Rule execution context\n */\nexport function isTrashcanItemSelected(context: RuleContext): boolean {\n  return [navigation.isTrashcan(context), hasSelection(context)].every(Boolean);\n}\n\n/**\n * Checks if user can view the file.\n * JSON ref: `canViewFile`\n * @param context Rule execution context\n */\nexport function canViewFile(context: RuleContext): boolean {\n  return [hasFileSelected(context), navigation.isNotTrashcan(context)].every(\n    Boolean\n  );\n}\n\n/**\n * Checks if user can **Leave** selected library.\n * JSON ref: `canLeaveLibrary`\n * @param context Rule execution context\n */\nexport function canLeaveLibrary(context: RuleContext): boolean {\n  return [hasLibrarySelected(context), hasLibraryRole(context)].every(Boolean);\n}\n\n/**\n * Checks if user can toggle shared link mode.\n * JSON ref: `canToggleSharedLink`\n * @param context Rule execution context\n */\nexport function canToggleSharedLink(context: RuleContext): boolean {\n  return [\n    hasFileSelected(context),\n    [canShareFile(context), isShared(context)].some(Boolean)\n  ].every(Boolean);\n}\n\n/**\n * Checks if user can show **Info Drawer** for the selected node.\n * JSON ref: `canShowInfoDrawer`\n * @param context Rule execution context\n */\nexport function canShowInfoDrawer(context: RuleContext): boolean {\n  return [\n    hasSelection(context),\n    navigation.isNotLibraries(context),\n    navigation.isNotTrashcan(context)\n  ].every(Boolean);\n}\n\n/**\n * Checks if user can manage file versions for the selected node.\n * JSON ref: `canManageFileVersions`\n * @param context Rule execution context\n */\nexport function canManageFileVersions(context: RuleContext): boolean {\n  return [\n    hasFileSelected(context),\n    navigation.isNotTrashcan(context),\n    !hasLockedFiles(context)\n  ].every(Boolean);\n}\n\n/**\n * Checks if user can manage permissions for the selected node.\n * JSON ref: `canManagePermissions`\n * @param context Rule execution context\n */\nexport function canManagePermissions(context: RuleContext): boolean {\n  return [\n    canUpdateSelectedNode(context),\n    navigation.isNotTrashcan(context)\n  ].every(Boolean);\n}\n\n/**\n * Checks if user can toggle **Edit Offline** mode for selected node.\n * JSON ref: `canToggleEditOffline`\n * @param context Rule execution context\n */\nexport function canToggleEditOffline(context: RuleContext): boolean {\n  return [\n    hasFileSelected(context),\n    navigation.isNotTrashcan(context),\n    canLockFile(context) || canUnlockFile(context)\n  ].every(Boolean);\n}\n\n/**\n * @deprecated Uses workarounds for for recent files and search api issues.\n * Checks if user can toggle **Favorite** state for a node.\n * @param context Rule execution context\n */\nexport function canToggleFavorite(context: RuleContext): boolean {\n  return [\n    [canAddFavorite(context), canRemoveFavorite(context)].some(Boolean),\n    [\n      navigation.isRecentFiles(context),\n      navigation.isSharedFiles(context),\n      navigation.isSearchResults(context),\n      navigation.isFavorites(context)\n    ].some(Boolean)\n  ].every(Boolean);\n}\n\n/**\n * Checks if application should render language picker menu.\n * JSON ref: `canShowLanguagePicker`\n * @param context Rule execution context\n */\nexport function canShowLanguagePicker(context: AcaRuleContext): boolean {\n  return context.languagePicker;\n}\n\n/**\n * Checks if application should render logout option.\n * JSON ref: `canShowLogout`\n * @param context Rule execution context\n */\nexport function canShowLogout(context: AcaRuleContext): boolean {\n  return !context.withCredentials;\n}\n\n/**\n * Checks if application should render process services extension.\n * JSON ref: `canShowProcessServices`\n * @param context Rule execution context\n */\nexport function canShowProcessServices(context: AcaRuleContext): boolean {\n  return context.processServices;\n}\n","/*!\n * @license\n * Alfresco Example Content Application\n *\n * Copyright (C) 2005 - 2020 Alfresco Software Limited\n *\n * This file is part of the Alfresco Example Content Application.\n * If the software was purchased under a paid Alfresco license, the terms of\n * the paid license agreement will prevail.  Otherwise, the software is\n * provided under the following open source license terms:\n *\n * The Alfresco Example Content Application is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The Alfresco Example Content Application is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with Alfresco. If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { RuleContext } from '@alfresco/adf-extensions';\n\n/**\n * Checks if user is admin.\n * JSON ref: `user.isAdmin`\n */\nexport function isAdmin(context: RuleContext): boolean {\n  return context.profile.isAdmin;\n}\n"]}