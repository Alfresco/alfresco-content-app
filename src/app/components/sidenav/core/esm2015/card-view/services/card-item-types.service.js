/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { CardViewDateItemComponent } from '../components/card-view-dateitem/card-view-dateitem.component';
import { CardViewMapItemComponent } from '../components/card-view-mapitem/card-view-mapitem.component';
import { CardViewTextItemComponent } from '../components/card-view-textitem/card-view-textitem.component';
import { CardViewSelectItemComponent } from '../components/card-view-selectitem/card-view-selectitem.component';
import { CardViewBoolItemComponent } from '../components/card-view-boolitem/card-view-boolitem.component';
import { CardViewKeyValuePairsItemComponent } from '../components/card-view-keyvaluepairsitem/card-view-keyvaluepairsitem.component';
import {
  DynamicComponentMapper,
  DynamicComponentResolver
} from '../../services/dynamic-component-mapper.service';
import { CardViewArrayItemComponent } from '../components/card-view-arrayitem/card-view-arrayitem.component';
import * as i0 from '@angular/core';
export class CardItemTypeService extends DynamicComponentMapper {
  constructor() {
    super(...arguments);
    this.defaultValue = CardViewTextItemComponent;
    this.types = {
      text: DynamicComponentResolver.fromType(CardViewTextItemComponent),
      select: DynamicComponentResolver.fromType(CardViewSelectItemComponent),
      int: DynamicComponentResolver.fromType(CardViewTextItemComponent),
      float: DynamicComponentResolver.fromType(CardViewTextItemComponent),
      date: DynamicComponentResolver.fromType(CardViewDateItemComponent),
      datetime: DynamicComponentResolver.fromType(CardViewDateItemComponent),
      bool: DynamicComponentResolver.fromType(CardViewBoolItemComponent),
      map: DynamicComponentResolver.fromType(CardViewMapItemComponent),
      keyvaluepairs: DynamicComponentResolver.fromType(
        CardViewKeyValuePairsItemComponent
      ),
      array: DynamicComponentResolver.fromType(CardViewArrayItemComponent)
    };
  }
}
CardItemTypeService.decorators = [
  {
    type: Injectable,
    args: [
      {
        providedIn: 'root'
      }
    ]
  }
];
/** @nocollapse */ CardItemTypeService.ngInjectableDef = i0.defineInjectable({
  factory: function CardItemTypeService_Factory() {
    return new CardItemTypeService();
  },
  token: CardItemTypeService,
  providedIn: 'root'
});
if (false) {
  /**
   * @type {?}
   * @protected
   */
  CardItemTypeService.prototype.defaultValue;
  /**
   * @type {?}
   * @protected
   */
  CardItemTypeService.prototype.types;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FyZC1pdGVtLXR5cGVzLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWNvcmUvIiwic291cmNlcyI6WyJjYXJkLXZpZXcvc2VydmljZXMvY2FyZC1pdGVtLXR5cGVzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUFFLFVBQVUsRUFBUSxNQUFNLGVBQWUsQ0FBQztBQUNqRCxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSwrREFBK0QsQ0FBQztBQUMxRyxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSw2REFBNkQsQ0FBQztBQUN2RyxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSwrREFBK0QsQ0FBQztBQUMxRyxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxtRUFBbUUsQ0FBQztBQUNoSCxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSwrREFBK0QsQ0FBQztBQUMxRyxPQUFPLEVBQUUsa0NBQWtDLEVBQUUsTUFBTSxpRkFBaUYsQ0FBQztBQUNySSxPQUFPLEVBQUUsc0JBQXNCLEVBQW1DLHdCQUF3QixFQUFFLE1BQU0saURBQWlELENBQUM7QUFDcEosT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0saUVBQWlFLENBQUM7O0FBSzdHLE1BQU0sT0FBTyxtQkFBb0IsU0FBUSxzQkFBc0I7SUFIL0Q7O1FBS2MsaUJBQVksR0FBYSx5QkFBeUIsQ0FBQztRQUVuRCxVQUFLLEdBQXVEO1lBQ2xFLE1BQU0sRUFBRSx3QkFBd0IsQ0FBQyxRQUFRLENBQUMseUJBQXlCLENBQUM7WUFDcEUsUUFBUSxFQUFFLHdCQUF3QixDQUFDLFFBQVEsQ0FBQywyQkFBMkIsQ0FBQztZQUN4RSxLQUFLLEVBQUUsd0JBQXdCLENBQUMsUUFBUSxDQUFDLHlCQUF5QixDQUFDO1lBQ25FLE9BQU8sRUFBRSx3QkFBd0IsQ0FBQyxRQUFRLENBQUMseUJBQXlCLENBQUM7WUFDckUsTUFBTSxFQUFFLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyx5QkFBeUIsQ0FBQztZQUNwRSxVQUFVLEVBQUUsd0JBQXdCLENBQUMsUUFBUSxDQUFDLHlCQUF5QixDQUFDO1lBQ3hFLE1BQU0sRUFBRSx3QkFBd0IsQ0FBQyxRQUFRLENBQUMseUJBQXlCLENBQUM7WUFDcEUsS0FBSyxFQUFFLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyx3QkFBd0IsQ0FBQztZQUNsRSxlQUFlLEVBQUUsd0JBQXdCLENBQUMsUUFBUSxDQUFDLGtDQUFrQyxDQUFDO1lBQ3RGLE9BQU8sRUFBRSx3QkFBd0IsQ0FBQyxRQUFRLENBQUMsMEJBQTBCLENBQUM7U0FDekUsQ0FBQztLQUNMOzs7WUFuQkEsVUFBVSxTQUFDO2dCQUNSLFVBQVUsRUFBRSxNQUFNO2FBQ3JCOzs7Ozs7OztJQUdHLDJDQUE2RDs7Ozs7SUFFN0Qsb0NBV0UiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlLCBUeXBlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDYXJkVmlld0RhdGVJdGVtQ29tcG9uZW50IH0gZnJvbSAnLi4vY29tcG9uZW50cy9jYXJkLXZpZXctZGF0ZWl0ZW0vY2FyZC12aWV3LWRhdGVpdGVtLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBDYXJkVmlld01hcEl0ZW1Db21wb25lbnQgfSBmcm9tICcuLi9jb21wb25lbnRzL2NhcmQtdmlldy1tYXBpdGVtL2NhcmQtdmlldy1tYXBpdGVtLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBDYXJkVmlld1RleHRJdGVtQ29tcG9uZW50IH0gZnJvbSAnLi4vY29tcG9uZW50cy9jYXJkLXZpZXctdGV4dGl0ZW0vY2FyZC12aWV3LXRleHRpdGVtLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBDYXJkVmlld1NlbGVjdEl0ZW1Db21wb25lbnQgfSBmcm9tICcuLi9jb21wb25lbnRzL2NhcmQtdmlldy1zZWxlY3RpdGVtL2NhcmQtdmlldy1zZWxlY3RpdGVtLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBDYXJkVmlld0Jvb2xJdGVtQ29tcG9uZW50IH0gZnJvbSAnLi4vY29tcG9uZW50cy9jYXJkLXZpZXctYm9vbGl0ZW0vY2FyZC12aWV3LWJvb2xpdGVtLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBDYXJkVmlld0tleVZhbHVlUGFpcnNJdGVtQ29tcG9uZW50IH0gZnJvbSAnLi4vY29tcG9uZW50cy9jYXJkLXZpZXcta2V5dmFsdWVwYWlyc2l0ZW0vY2FyZC12aWV3LWtleXZhbHVlcGFpcnNpdGVtLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBEeW5hbWljQ29tcG9uZW50TWFwcGVyLCBEeW5hbWljQ29tcG9uZW50UmVzb2x2ZUZ1bmN0aW9uLCBEeW5hbWljQ29tcG9uZW50UmVzb2x2ZXIgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9keW5hbWljLWNvbXBvbmVudC1tYXBwZXIuc2VydmljZSc7XG5pbXBvcnQgeyBDYXJkVmlld0FycmF5SXRlbUNvbXBvbmVudCB9IGZyb20gJy4uL2NvbXBvbmVudHMvY2FyZC12aWV3LWFycmF5aXRlbS9jYXJkLXZpZXctYXJyYXlpdGVtLmNvbXBvbmVudCc7XG5cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgQ2FyZEl0ZW1UeXBlU2VydmljZSBleHRlbmRzIER5bmFtaWNDb21wb25lbnRNYXBwZXIge1xuXG4gICAgcHJvdGVjdGVkIGRlZmF1bHRWYWx1ZTogVHlwZTx7fT4gPSBDYXJkVmlld1RleHRJdGVtQ29tcG9uZW50O1xuXG4gICAgcHJvdGVjdGVkIHR5cGVzOiB7IFtrZXk6IHN0cmluZ106IER5bmFtaWNDb21wb25lbnRSZXNvbHZlRnVuY3Rpb24gfSA9IHtcbiAgICAgICAgJ3RleHQnOiBEeW5hbWljQ29tcG9uZW50UmVzb2x2ZXIuZnJvbVR5cGUoQ2FyZFZpZXdUZXh0SXRlbUNvbXBvbmVudCksXG4gICAgICAgICdzZWxlY3QnOiBEeW5hbWljQ29tcG9uZW50UmVzb2x2ZXIuZnJvbVR5cGUoQ2FyZFZpZXdTZWxlY3RJdGVtQ29tcG9uZW50KSxcbiAgICAgICAgJ2ludCc6IER5bmFtaWNDb21wb25lbnRSZXNvbHZlci5mcm9tVHlwZShDYXJkVmlld1RleHRJdGVtQ29tcG9uZW50KSxcbiAgICAgICAgJ2Zsb2F0JzogRHluYW1pY0NvbXBvbmVudFJlc29sdmVyLmZyb21UeXBlKENhcmRWaWV3VGV4dEl0ZW1Db21wb25lbnQpLFxuICAgICAgICAnZGF0ZSc6IER5bmFtaWNDb21wb25lbnRSZXNvbHZlci5mcm9tVHlwZShDYXJkVmlld0RhdGVJdGVtQ29tcG9uZW50KSxcbiAgICAgICAgJ2RhdGV0aW1lJzogRHluYW1pY0NvbXBvbmVudFJlc29sdmVyLmZyb21UeXBlKENhcmRWaWV3RGF0ZUl0ZW1Db21wb25lbnQpLFxuICAgICAgICAnYm9vbCc6IER5bmFtaWNDb21wb25lbnRSZXNvbHZlci5mcm9tVHlwZShDYXJkVmlld0Jvb2xJdGVtQ29tcG9uZW50KSxcbiAgICAgICAgJ21hcCc6IER5bmFtaWNDb21wb25lbnRSZXNvbHZlci5mcm9tVHlwZShDYXJkVmlld01hcEl0ZW1Db21wb25lbnQpLFxuICAgICAgICAna2V5dmFsdWVwYWlycyc6IER5bmFtaWNDb21wb25lbnRSZXNvbHZlci5mcm9tVHlwZShDYXJkVmlld0tleVZhbHVlUGFpcnNJdGVtQ29tcG9uZW50KSxcbiAgICAgICAgJ2FycmF5JzogRHluYW1pY0NvbXBvbmVudFJlc29sdmVyLmZyb21UeXBlKENhcmRWaWV3QXJyYXlJdGVtQ29tcG9uZW50KVxuICAgIH07XG59XG4iXX0=
