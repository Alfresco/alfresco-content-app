dist: trusty
sudo: required
services:
  - docker
addons:
  chrome: stable
language: node_js
node_js:
  - '10'

cache:
  bundler: true
  directories:
    - node_modules
    - dist
    - $HOME/docker
    - $HOME/dist
    - $HOME/disttomcat

env:
  matrix:
    - DEPLOYMENT=Nginx SUITES=authentication
    - DEPLOYMENT=Nginx SUITES=listViews
    - DEPLOYMENT=Nginx SUITES=application
    - DEPLOYMENT=Nginx SUITES=navigation
    - DEPLOYMENT=Nginx SUITES=pagination
    - DEPLOYMENT=Nginx SUITES=search
    # - DEPLOYMENT=Nginx SUITES=actions
    - DEPLOYMENT=Nginx SUITES=viewer
    - DEPLOYMENT=Nginx SUITES=infoDrawer
    - DEPLOYMENT=Nginx SUITES=extensions

before_script:
  - sudo /etc/init.d/postgresql stop
  # Load cached docker images
  - if [[ -d $HOME/docker ]]; then ls $HOME/docker/*.tar.gz | xargs -I {file} sh -c "zcat {file} | docker load"; fi

before_install:
  - npm install -g npm@latest
  - export DISPLAY=:99.0
  - sh -e /etc/init.d/xvfb start
  - sleep 3

script: |
  # Copy cached dist
  # cp -a $HOME/dist dist
  # Set test suites
  SUITE="--suite $SUITES"
  if [ "$DEPLOYMENT" == "Nginx" ]; then
    cp -a $HOME/dist dist
    npm run e2e:docker
  else
    cp -a $HOME/disttomcat dist
    npm run docker.tomcat.e2e
  fi

stages:
  - name: Quality and Unit tests

jobs:
  include:
    - stage: Quality and Unit tests
      name: Code quality checks
      script:
        - npm run lint
    - name: Unit tests
      script:
        - npm run test:ci
        - bash <(curl -s https://codecov.io/bash) -X gcov
    - name: Cache Nginx dist
      script:
        - npm run build.e2e
        - cp -a dist $HOME/dist
    - name: Cache Tomcat dist
      script:
        - npm run build.tomcat.e2e
        - cp -a dist $HOME/disttomcat
    # - name: Cache docker images
    #   script:
    #     - |
    #       if [ "$DEPLOYMENT" == "Nginx" ]; then
    #         npm run build.e2e
    #       else
    #         npm run build.tomcat.e2e && cd docker/tomcat
    #       fi
    #       docker-compose up -d --build && npm run wait:app
    #     - |
    #       mkdir -p $HOME/docker && docker images -a --filter='caching=true' --format '{{.Repository}}:{{.Tag}} {{.ID}}' |
    #       xargs -n 2 -t sh -c 'test -e $HOME/docker/$1.tar.gz || docker save $0 | gzip -2 > $HOME/docker/$1.tar.gz'
